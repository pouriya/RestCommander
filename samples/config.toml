[logging]
## Logging level name.
## Possible values: off | error | warning | info | debug | trace
level_name = "info"
## Logging output.
## Possible values: stdout | stderr | off | DIRECTORY_PATH
## If set to `DIRECTORY_PATH`, it creates daily rotated files inside `DIRECTORY_PATH` in
## form of restcommander.log.YEAR-MONTH-DAY
output = "stderr"
## Scripts report output.
## Possible values: stdout | stderr | off | FILENAME
report = "stdout"

[server]
## HTTP server listen address.
## Default value: "127.0.0.1"
host = "127.0.0.1"
## HTTP server listen port number.
## Default value: 1995
port = 1995

## HTTP server basic authentication username.
## You can use this `username` and configured password to get a new bearer token.
## If the value is empty and no password is configured, then no authentication
## is needed for anything. If the value is empty and password is configured, the
## username will be `admin`.
username = "admin"
## A file containing sha512 of your user password.
## By configuring this you are able to change the password in runtime via REST API or in
## web dashboard.
## Make sure that RestCommander process has appropriate permissions to write to the file.
## Empty value means this option should be discarded and if one of server `password_file`
## and `password_sha512` is not configured, You can call every REST API endpoint without
## authentication.
## You can use `sha512` subcommand to generate sha512 of your passwords.
password_file = "password-file.sha512"
## sha512 of you user password.

## If server `password_file` is configured, this is discarded.
## Note that by configuring this, You can not change the password via REST API.
## Empty value means this option should be discarded and if one of server `password_file`
## and `password_sha512` is not configured, You can call every REST API endpoint without
## authentication.
## You can use `sha512` subcommand to generate sha512 of your passwords.
# password_sha512 = "c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a38015f23f3eab1d80b931dd472634dfac71cd34ebc35d16ab7fb8a90c81f975113d6c7538dc69dd8de9077ec" # sha512 of word `admin`

## HTTP server TLS certificate file.
## If you configure this along with server `tls_key_file` option, RestCommander
## serves everything over HTTPS.
## You can get a test certificate via `sample self-signed-cert` subcommand.
tls_cert_file = "cert.pem"
## HTTP server TLS private-key file.
## If you configure this along with server `tls_cert_file` option, RestCommander
## serves everything over HTTPS.
## You can get a test private-key via `sample self-signed-key` subcommand.
tls_key_file = "key.pem"
## Enable/Disable CAPTCHA.
captcha = true
## Make CAPTCHA case-sensitive
captcha_case_sensitive = false
## List of IP addresses that can interact with REST-API. Wildcard characters like *
## are allowed.
## No value means everyone can interact with REST-API.
## RestCommander currently does not support HTTP IP headers, So this IP address
## is the connected client IP address and not the IP address that upstream webserver
## forwards in the request header.
ip_whitelist = []
## hardcoded HTTP bearer token that does not expire.
## You can use this value in your application(s) then you do not have to pass
## CAPTCHA each time the previous token has expired to get a new one.
api_token = ""
## Timeout for dynamically generated HTTP bearer tokens in seconds.
## The default value is 1 week.
token_timeout = 604800

[commands]
## Root directory to load command files and directories and their information files.
root_directory = "scripts"
## Your scripts will receive `commands.configuration` key/values directly from env or stdin
[commands.configuration]
## foo = 1234


[www]
## A directory to serve your own web files under `/static/*` HTTP path.
## Also you can override RestCommander virtual files inside this folder.
## RestCommander virtual files are: index.html, index.js, login.html,
## login.js, commands.html, commands.js, restcommander-background-image.jpg,
## favicon.ico, bootstrap.bundle.min.js, bootstrap.min.css, api.js, utils.js.
static_directory = "www"
## By default the web dashboard is enabled. You can disable it and just use the REST API.
enabled = true

## You can access `www.configuration` key-values from REST API `/public/configuration` endpoint.
[www.configuration]
## RestCommander default dashboard uses the following key-values:
title = "RestCommander"
banner-title = "Simple, Flexible and Reliable"
banner-text = "{{title}} helps you run your own scripts simply from its web dashboard or REST API"
login-title = "Login to {{title}}"
footer = "Hosted on <a href=\"https://github.com/pouriya/RestCommander\" target=\"_blank\"><b>GitHub</b></a>"
