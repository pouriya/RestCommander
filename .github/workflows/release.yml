name: Release

on:
  push:
    tags:
      - "*"
  # Run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  docker:
    needs: publish-installer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/restcommander:${{ github.ref_name }},${{ secrets.DOCKERHUB_USERNAME }}/restcommander:latest


  publish-installer:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checking out sources
        uses: actions/checkout@v1
      
      - name: Replace version inside `install.sh`
        shell: bash
        run: |
          cp ./tools/install.sh .
          sed -i "s|_version=\"latest\"|_version=\"${{ github.ref_name }}\"|g" install.sh
      
      - name: Releasing `install.sh` for `${{ github.ref_name }}`
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: install.sh

      - name: Releasing `install.sh` for latest
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: false
          draft: false
          tag_name: latest
          files: tools/install.sh

  publish:
    name: ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-12
            target: x86_64-apple-darwin
          - os: macos-11
            target: x86_64-apple-darwin

          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-musl
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl

          - os: windows-2022
            target: x86_64-pc-windows-gnu
          - os: windows-2019
            target: x86_64-pc-windows-gnu

    steps:
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Installing needed macOS dependencies
        if: contains(matrix.os, 'macos-')
        run: |
          brew install openssl@1.1
          brew install make

      - name: Installing needed Linux dependencies
        if: contains(matrix.os, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev liblzma-dev dpkg dpkg-dev
          cargo install cargo-deb

      - name: Installing needed Windows dependencies
        if: contains(matrix.os, 'windows-')
        run: |
          rustup target add ${{ matrix.target }}

      - name: Installing needed Linux dependencies for `musl`
        if: contains(matrix.os, 'ubuntu-') && contains(matrix.target, '-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq musl-dev musl-tools
          rustup target add ${{ matrix.target }}

      - name: Checking out sources
        uses: actions/checkout@v1
      
      - name: Running `make release`
        run: make release VERSION=${{ github.ref_name }} TARGET=${{ matrix.target }} RELEASE_FILENAME_POSTFIX=-${{ matrix.os }}

      - name: Running `make deb` on Linux
        if: contains(matrix.os, 'ubuntu-')
        shell: bash
        run: make deb VERSION=${{ github.ref_name }} TARGET=${{ matrix.target }} RELEASE_FILENAME_POSTFIX=-${{ matrix.os }}

      - name: Rename Windows executable
        if: contains(matrix.os, 'windows-')
        shell: bash
        run: |
          NAME=`ls restcommander-*` 
          mv $NAME `echo $NAME | sed 's/.exe//'`.exe

      - name: Releasing assets for `${{ github.ref_name }}`
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: restcommander-*

      - name: Replace `${{ github.ref_name }}` to `latest` in release files
        shell: bash
        run: |
          for filename in restcommander-*; do
            newfilename=`echo $filename | sed 's/${{ github.ref_name }}/latest/g'`
            mv $filename $newfilename
          done

      - name: Releasing assets for latest
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: false
          draft: false
          tag_name: latest
          files: restcommander-*
