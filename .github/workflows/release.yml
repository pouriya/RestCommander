# This is a basic workflow to help you get started with Actions

name: Release

on:
  push:
    tags:
      - "*"
  # Run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  publish:
    name: ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin

          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-musl
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-musl

          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-2019
            target: x86_64-pc-windows-msvc

    steps:
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Installing needed macOS dependencies
        if: contains(matrix.os, 'macos-')
        run: |
          brew install openssl@1.1
          brew install make

      - name: Installing needed Linux dependencies
        if: contains(matrix.os, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq pkg-config libssl-dev liblzma-dev dpkg dpkg-dev
          cargo install cargo-deb

      - name: Installing needed Linux dependencies for `musl`
        if: contains(matrix.os, 'ubuntu-') && contains(matrix.target, '-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y -qq musl-dev musl-tools
          rustup target add ${{ matrix.target }}

      - name: Checking out sources
        uses: actions/checkout@v1
      
      - name: Running `make release`
        run: make release TARGET=${{ matrix.target }} RELEASE_FILENAME_POSTFIX=-${{ matrix.os }}

      - name: Running `make deb` on Linux
        if: contains(matrix.os, 'ubuntu-')
        shell: bash
        run: make deb TARGET=${{ matrix.target }} RELEASE_FILENAME_POSTFIX=-${{ matrix.os }}

      - name: Fix Windows executable name
        if: contains(matrix.os, 'windows-')
        shell: bash
        run: |
          NAME=`ls restcommander-*` 
          mv $NAME `echo $NAME | sed 's/.exe//'`.exe

      - name: ls -lash .
        shell: bash
        run: ls -lash .

      - name: GitHub release for latest
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Latest Build"
          files: restcommander-*
    
      - name: GitHub release for ${{  github.ref_name }}
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{  github.ref_name }}"
          prerelease: true
          title: "${{  github.ref_name }}"
          files: restcommander-*
